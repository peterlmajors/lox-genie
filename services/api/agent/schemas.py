
from typing import List, Any, Dict, Union
from langchain_core.messages import HumanMessage, AIMessage
from pydantic import BaseModel, Field
import uuid


# Response schemas
class GatekeeperResponse(BaseModel):
    action: str = Field(..., description="The action to take: direct_answer, research_required, clarification_needed, or off_topic")
    response: str = Field(default="", description="The response to give to the user")

class PlanResponse(BaseModel):
    plan_id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique ID for the plan.")
    subtasks: List[str] = Field(..., description="List of subtasks to perform.")
    
class ToolExecutorResponse(BaseModel):
    tool_id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique ID for the tool execution.")
    plan_id: str = Field(..., description="Unique ID for the plan.")
    tool: str = Field(..., description="Name of the tool selected to execute the task.")
    parameters: Dict[str, Any] = Field(..., description="Parameters for the tool selected to execute the task.")
    tool_response: Any = Field(..., description="Response from the tool selected to execute the task.")

class MessageCounts(BaseModel):
    total: int = Field(0, description="Total number of messages in thread.")
    user: int = Field(0, description="Number of human messages in thread.")
    lox: int = Field(0, description="Number of AI messages in thread.")

class Context(BaseModel):
    context: str = Field(default="", description="Reduced context of the thread.")

# State schemas
class AgentState(BaseModel):
    thread_id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique ID for the agent state.")
    messages: List[Union[HumanMessage, AIMessage]] = Field(default_factory=list, description="Chronological list of chat messages.")
    message_counts: MessageCounts = Field(default=MessageCounts(), description="Number of human and AI messages in thread.")
    reduced_context: Context = Field(default=Context(), description="Reduced context from the thread (moderate-term agent memory).")
    relevant: bool = Field(default=False, description="Whether the latest user message is relevant to the agent's context.")
    plan: List[PlanResponse] = Field(default_factory=list, description="Current plan generated by the agent.")
    tool_calls: List[ToolExecutorResponse] = Field(default_factory=list, description="List tool executions performed.")